{"version":3,"sources":["features/header/SmallNavbar.js","features/header/Navbar.js","constants/URLs.js","store/defaultLocationSlice.js","hooks/reactQuery.js","components/FavoriteButton/FavoriteButton.js","components/UI/Divider.js","hooks/useWindowDimensions.js","utils/parseDateToDay.js","components/FiveDayForecast.js/SingleDayDetailedView.js","utils/checkIfDayTime.js","components/FiveDayForecast.js/SingleDayView.js","components/FiveDayForecast.js/FiveDaysTabs.js","components/FiveDayForecast.js/FiveDayForecast.js","components/UI/Spinner.js","components/SearchInput/SearchInput.js","features/home/Home.js","features/favorites/Favorites.slice.js","components/FavoriteLocationCard/FavoriteLocationCardInner.js","components/FavoriteLocationCard/FavoriteLocationCard.js","features/favorites/Favorites.js","routes/AppRoutes.js","App.js","store/store.js","index.js"],"names":["SmallNavbar","navigation","Panel","className","close","map","item","exact","to","activeClassName","onClick","name","Navbar","as","open","Button","style","height","API_KEY","GOOGLE_API_KEY","getWeatherIconURL","iconNumber","slice","getGooglePlacesURL","input","getGooglePlacePhotoURL","photoRef","maxWidth","createSlice","initialState","location","key","cityName","countryName","reducers","setLocation","state","newLocation","selectDefaultLocation","actions","defaultLocation","defualtQuerySettings","defaultRequestOptions","mode","method","headers","Headers","useFetchMultipleCurrentConditions","locationKeysArray","useQueries","queryKey","queryFn","_fetch","url","a","options","fetch","response","ok","console","log","status","Error","json","data","FavoriteButton","locationKey","size","color","props","Divider","getWindowDimensions","window","width","innerWidth","innerHeight","days","full","short","parseDateToDay","date","getDay","SingleDayDetailedView","checkIfDayTime","sunRise","sunSet","timeNow","Date","rise","set","setDate","SingleDayView","weatherData","day","isDayTime","Sun","Rise","Set","temp","Temperature","feelsLike","RealFeelTemperature","phrase","Day","LongPhrase","iconSrc","Icon","Night","src","alt","Minimum","Value","Unit","Maximum","SunOrMoon","riseTime","Moon","setTime","getHours","getMinutes","getRiseToSetTimeString","FiveDaysTabs","dailyForecasts","isDetailedView","Group","List","selected","Panels","i","EpochDate","FiveDayForecast","TLV","headline","Headline","Text","DailyForecasts","forcast","windowWidth","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","Spinner","SearchInput","value","setValue","type","onChange","e","target","placeholder","visibility","Home","useSelector","useQuery","place","error","candidates","photos","photo_reference","enabled","useFetchLocationPhoto","isSuccess","isLoading","favorites","addFavorite","newFavorite","push","removeFavorite","favorite","filter","_favorite","replaceFavorites","newFavoritesArray","selectFavorites","FavoriteLocationCardInner","locationData","WeatherIcon","WeatherText","Metric","FavoriteLocationCard","useQueryClient","getQueryState","useGetCurrectCondotions","Favorites","favoritesKeys","fav","length","AppRoutes","path","App","store","configureStore","reducer","favoritesSlice","defaultLocationSlice","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.b8fba532.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Disclosure } from '@headlessui/react';\r\n\r\nconst SmallNavbar = ({ navigation }) => {\r\n  return (\r\n    <Disclosure.Panel className=\"sm:hidden\">\r\n      {({ close }) => (\r\n        <div className=\"px-2 pt-2 pb-3 space-y-1\">\r\n          {navigation.map((item) => (\r\n            <NavLink\r\n              key={item.to}\r\n              exact={item.exact}\r\n              to={item.to}\r\n              activeClassName=\"bg-gray-900 text-white\"\r\n              className=\"text-gray-300 hover:bg-gray-700 hover:text-white block px-3 py-2 rounded-md text-base font-medium\"\r\n              onClick={close}\r\n            >\r\n              {item.name}\r\n            </NavLink>\r\n          ))}\r\n          <span className=\"text-gray-300 px-3 py-2 flex justify-between w-full\">\r\n            <label>Set Unit:</label>\r\n            <button className=\"ml-auto px-4 border border-white rounded-md\">\r\n              F\r\n            </button>\r\n          </span>\r\n          <span className=\"text-gray-300 px-3 py-2 flex justify-between w-full\">\r\n            <label>Set Theme:</label>\r\n            <button className=\"ml-auto px-4 border border-white rounded-md\">\r\n              DARK\r\n            </button>\r\n          </span>\r\n        </div>\r\n      )}\r\n    </Disclosure.Panel>\r\n  );\r\n};\r\n\r\nexport default SmallNavbar;\r\n","import { Disclosure } from '@headlessui/react';\r\nimport { MenuIcon, XIcon } from '@heroicons/react/outline';\r\nimport useDimensions from 'hooks/useDimensions';\r\nimport { NavLink } from 'react-router-dom';\r\nimport SmallNavbar from './SmallNavbar';\r\n\r\nconst navigation = [\r\n  { name: 'Home', to: '/', exact: true },\r\n  { name: 'Favorites', to: '/favorites', exact: false },\r\n];\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <>\r\n      <Disclosure as=\"nav\" className=\"bg-gray-800 fixed w-full top-0 z-50\">\r\n        {({ open }) => (\r\n          <>\r\n            <div className=\"container mx-auto px-2 sm:px-0 \">\r\n              <div className=\"relative flex items-center justify-between h-16\">\r\n                <div className=\"absolute inset-y-0 left-0 flex items-center sm:hidden\">\r\n                  <Disclosure.Button className=\"inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-white hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white\">\r\n                    <span className=\"sr-only\">Open main menu</span>\r\n                    {open ? (\r\n                      <XIcon className=\"block h-6 w-6\" aria-hidden=\"true\" />\r\n                    ) : (\r\n                      <MenuIcon className=\"block h-6 w-6\" aria-hidden=\"true\" />\r\n                    )}\r\n                  </Disclosure.Button>\r\n                </div>\r\n                <div className=\"flex-1 flex items-center justify-center sm:items-stretch sm:justify-start\">\r\n                  <div className=\"flex-shrink-0 flex items-center\">\r\n                    <h1 className=\"text-white font-bold\">Hello Herolo :)</h1>\r\n                  </div>\r\n                  <div className=\"hidden sm:flex items-center sm:ml-6 w-full\">\r\n                    <div className=\"flex space-x-4\">\r\n                      {navigation.map((item) => (\r\n                        <NavLink\r\n                          key={item.to}\r\n                          exact={item.exact}\r\n                          activeClassName=\"bg-gray-900 text-white\"\r\n                          className=\"text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium\"\r\n                          to={item.to}\r\n                        >\r\n                          {item.name}\r\n                        </NavLink>\r\n                      ))}\r\n                    </div>\r\n                    <div className=\"ml-auto\">\r\n                      <span className=\"text-gray-300\">\r\n                        <label>Set Unit:</label>\r\n                        <button className=\"mx-4 px-4 border border-white rounded-md\">\r\n                          F\r\n                        </button>\r\n                      </span>\r\n                      <span className=\"text-gray-300\">\r\n                        <label>Set Theme:</label>\r\n                        <button className=\"ml-4 px-4 border border-white rounded-md\">\r\n                          DARK\r\n                        </button>\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <SmallNavbar navigation={navigation} />\r\n          </>\r\n        )}\r\n      </Disclosure>\r\n      <div style={{ height: '64px' }} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","const API_KEY = 'Ta2A30OlXxtpBaUtd0YGnimUsuodaGs7';\r\nconst GOOGLE_API_KEY = 'AIzaSyDpqwNPv7ZgeuidS9COJhuTovBuk5IVSRU';\r\n\r\nexport const getCurrentConditionsURL = (locationKey) =>\r\n  `http://dataservice.accuweather.com/currentconditions/v1/${locationKey}?apikey=${API_KEY}&details=true`;\r\n\r\nexport const getFiveDayForcastURL = (locationKey, metric) =>\r\n  `http://dataservice.accuweather.com/forecasts/v1/daily/5day/${locationKey}?apikey=${API_KEY}&details=true&metric=${metric}`;\r\n\r\nexport const getAutoCompleteURL = (searchStr) =>\r\n  `http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${searchStr}`;\r\n\r\nexport const getWeatherIconURL = (iconNumber) =>\r\n  `https://developer.accuweather.com/sites/default/files/${(\r\n    '0' + iconNumber\r\n  ).slice(-2)}-s.png`;\r\n\r\nexport const getGeoSearchURL = (lat, ion) =>\r\n  `http://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=${API_KEY}&q=${\r\n    lat + ', ' + ion\r\n  }&details=true`;\r\n\r\nexport const getGooglePlacesURL = (input) =>\r\n  `https://maps.googleapis.com/maps/api/place/findplacefromtext/json?input=${input}&inputtype=textquery&fields=photos&key=${GOOGLE_API_KEY}`;\r\n\r\nexport const getGooglePlacePhotoURL = (photoRef, maxWidth) =>\r\n  `https://maps.googleapis.com/maps/api/place/photo?key=${GOOGLE_API_KEY}&photo_reference=${photoRef}&maxwidth=${maxWidth}`;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const slice = createSlice({\r\n  name: 'defaultLocation',\r\n  initialState: {\r\n    location: { key: 215854, cityName: 'Tel Aviv', countryName: 'Israel' },\r\n  },\r\n  reducers: {\r\n    setLocation: (state, newLocation) => (state = newLocation),\r\n  },\r\n});\r\n\r\nexport const { setLocation } = slice.actions;\r\nexport const selectDefaultLocation = (state) => state.defaultLocation.location;\r\nexport default slice.reducer;\r\n","import {\r\n  getAutoCompleteURL,\r\n  getCurrentConditionsURL,\r\n  getFiveDayForcastURL,\r\n  getGeoSearchURL,\r\n  getGooglePlacePhotoURL,\r\n  getGooglePlacesURL,\r\n} from 'constants/URLs';\r\nimport { useEffect } from 'react';\r\nimport { useQueries, useQuery, useQueryClient } from 'react-query';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setLocation } from 'store/defaultLocationSlice';\r\nimport useCurrentLocation from './useCurrentLocation';\r\n\r\nconst defualtQuerySettings = {};\r\n\r\nconst defaultRequestOptions = {\r\n  mode: 'cors',\r\n  method: 'GET',\r\n  headers: new Headers({ 'Accept-Encoding': 'gzip' }),\r\n};\r\n\r\nexport const useFetchMultipleCurrentConditions = (locationKeysArray) => {\r\n  return useQueries(\r\n    locationKeysArray.map((key) => {\r\n      return {\r\n        queryKey: ['currentConditions', key],\r\n        queryFn: () => _fetch(getCurrentConditionsURL(key)),\r\n      };\r\n    })\r\n  );\r\n};\r\n\r\nexport const useGetCurrectCondotions = (locationKey) => {\r\n  const queryClient = useQueryClient();\r\n  return queryClient.getQueryState(['currentConditions', locationKey], {\r\n    exact: true,\r\n  });\r\n};\r\n\r\nexport const useFetchFiveDaysForecast = (locationKey, metric = true) =>\r\n  useQuery(\r\n    ['fiveDaysForecast', locationKey],\r\n    () => _fetch(getFiveDayForcastURL(locationKey, metric)),\r\n    defualtQuerySettings\r\n  );\r\n\r\nexport const useFetchSearchByCity = (cityName) =>\r\n  useQuery(\r\n    ['search', cityName],\r\n    () => _fetch(getAutoCompleteURL(cityName)),\r\n    defualtQuerySettings\r\n  );\r\n\r\nexport const useFetchByGEOLocation = () => {\r\n  const dispatch = useDispatch();\r\n  const { location } = useCurrentLocation();\r\n  const { latitude, longitude } = location;\r\n  const { isSuccess, data } = useQuery(\r\n    ['search', latitude, longitude],\r\n    () => _fetch(getGeoSearchURL(latitude, longitude)),\r\n    {\r\n      ...defualtQuerySettings,\r\n      enabled: !!location.latitude && !!location.longitude,\r\n    }\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isSuccess && data) {\r\n      const { Key, Country, EnglishName } = data;\r\n      dispatch(\r\n        setLocation({\r\n          key: Key,\r\n          cityName: EnglishName,\r\n          countryName: Country.EnglishName,\r\n        })\r\n      );\r\n    }\r\n  }, [isSuccess, data]);\r\n};\r\n\r\nexport const useFetchLocationPhoto = (\r\n  cityName,\r\n  countryName,\r\n  maxWidth = 1024\r\n) => {\r\n  const { data: place, error } = useQuery(\r\n    ['googlePlace', cityName, countryName],\r\n    () =>\r\n      _fetch(getGooglePlacesURL(cityName + ' ' + countryName), {\r\n        ...defaultRequestOptions,\r\n      })\r\n  );\r\n\r\n  const photoRef = place?.candidates[0]?.photos[0].photo_reference;\r\n\r\n  return useQuery(\r\n    ['photo', photoRef],\r\n    () => _fetch(getGooglePlacePhotoURL(photoRef, maxWidth)),\r\n    { ...defualtQuerySettings, enabled: !!photoRef }\r\n  );\r\n};\r\n\r\nconst _fetch = async (url, options = defaultRequestOptions) => {\r\n  try {\r\n    const response = await fetch(url, options);\r\n    if (!response.ok) {\r\n      console.log(response.status);\r\n      throw new Error('Error while fetching data...');\r\n    }\r\n    if (response.status === 204) return;\r\n    const data = await response.json();\r\n    return data;\r\n  } catch (error) {\r\n    console.log(error);\r\n    throw error;\r\n  }\r\n};\r\n","import React from 'react';\r\nimport { MdFavoriteBorder, MdFavorite } from 'react-icons/md';\r\n\r\nconst FavoriteButton = ({\r\n  locationKey = true,\r\n  size = 35,\r\n  color = 'red',\r\n  ...props\r\n}) => {\r\n  return (\r\n    <button {...props}>\r\n      {locationKey ? (\r\n        <MdFavorite size={size} color={color} />\r\n      ) : (\r\n        <MdFavoriteBorder size={size} color={color} />\r\n      )}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default FavoriteButton;\r\n","import React from 'react';\r\n\r\nconst Divider = ({ className, ...props }) => {\r\n  return (\r\n    <div className={`flex flex-col divide-y-2 my-6 ${className}`} {...props}>\r\n      <span></span>\r\n      <span></span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Divider;\r\n","import { useEffect, useState } from 'react';\r\n\r\nfunction getWindowDimensions() {\r\n  const { innerWidth: width, innerHeight: height } = window;\r\n  return {\r\n    width,\r\n    height,\r\n  };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n  const [windowDimensions, setWindowDimensions] = useState(\r\n    getWindowDimensions()\r\n  );\r\n\r\n  useEffect(() => {\r\n    function handleResize() {\r\n      setWindowDimensions(getWindowDimensions());\r\n    }\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n}\r\n","const days = [\r\n  { full: 'Sunday', short: 'Sun.' },\r\n  { full: 'Monday', short: 'Mon.' },\r\n  { full: 'Tuesday', short: 'Tue.' },\r\n  { full: 'Wednesday', short: 'Wed.' },\r\n  { full: 'Thursday', short: 'Thu.' },\r\n  { full: 'Friday', short: 'Fri.' },\r\n  { full: 'Saturday', short: 'Sat.' },\r\n];\r\n\r\nconst parseDateToDay = (date) => {\r\n  return days[date.getDay()];\r\n};\r\n\r\nexport default parseDateToDay;\r\n","import React from 'react'\r\n\r\nconst SingleDayDetailedView = () => {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleDayDetailedView\r\n","const checkIfDayTime = (sunRise, sunSet) => {\r\n  const timeNow = new Date();\r\n  const rise = new Date(sunRise);\r\n  const set = new Date(sunSet);\r\n  timeNow.setDate(0);\r\n  rise.setDate(0);\r\n  set.setDate(0);\r\n  if (timeNow >= rise && timeNow <= set) {\r\n    return true;\r\n  }\r\n  return false;\r\n};\r\n\r\nexport default checkIfDayTime;\r\n","import { getWeatherIconURL } from 'constants/URLs';\r\nimport React from 'react';\r\nimport checkIfDayTime from 'utils/checkIfDayTime';\r\n\r\nconst SingleDayView = ({ weatherData, day }) => {\r\n  const isDayTime = checkIfDayTime(weatherData.Sun.Rise, weatherData.Sun.Set);\r\n\r\n  const { Temperature: temp, RealFeelTemperature: feelsLike } = weatherData;\r\n  let phrase = weatherData.Day.LongPhrase;\r\n  let iconSrc = getWeatherIconURL(weatherData.Day.Icon);\r\n  if (!isDayTime) {\r\n    phrase = weatherData.Night.LongPhrase;\r\n    iconSrc = getWeatherIconURL(weatherData.Night.Icon);\r\n  }\r\n\r\n  const getRiseToSetTimeString = () => {\r\n    let SunOrMoon = isDayTime ? 'Sun' : 'Moon';\r\n    let riseTime = isDayTime\r\n      ? new Date(weatherData.Sun.Rise)\r\n      : new Date(weatherData.Moon.Rise);\r\n    let setTime = isDayTime\r\n      ? new Date(weatherData.Sun.Set)\r\n      : new Date(weatherData.Moon.Set);\r\n\r\n    return (\r\n      <h3>\r\n        <strong>{SunOrMoon} Time: </strong>\r\n        {riseTime.getHours() +\r\n          ':' +\r\n          ('0' + riseTime.getMinutes()).slice(-2)} -{' '}\r\n        {setTime.getHours() + ':' + ('0' + setTime.getMinutes()).slice(-2)}\r\n      </h3>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"border rounded-md flex flex-col justify-between p-4 w-full\">\r\n      <h3 className=\"text-base font-bold\">{day.full}</h3>\r\n      <img src={iconSrc} width=\"150px\" alt=\"\" className=\"mx-auto\" />\r\n      <h1 className=\"text-xl font-light italic\">{phrase}</h1>\r\n      <div className=\"text-base\">\r\n        <h3>\r\n          <strong>Temperature: </strong>\r\n          <span className=\"\">\r\n            {`${temp.Minimum.Value + temp.Minimum.Unit} -\r\n        ${temp.Maximum.Value + temp.Maximum.Unit}`}\r\n          </span>\r\n        </h3>\r\n        <h3>\r\n          <strong>Feels Like: </strong>\r\n          {`${feelsLike.Minimum.Value + feelsLike.Minimum.Unit} -\r\n        ${feelsLike.Maximum.Value + feelsLike.Maximum.Unit}`}\r\n        </h3>\r\n        {getRiseToSetTimeString()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleDayView;\r\n","import { Tab } from '@headlessui/react';\r\nimport React from 'react';\r\nimport SingleDayDetailedView from './SingleDayDetailedView';\r\nimport SingleDayView from './SingleDayView';\r\n\r\nconst FiveDaysTabs = ({ days, dailyForecasts, isDetailedView = false }) => {\r\n  return (\r\n    <Tab.Group>\r\n      <Tab.List className=\"flex p-1 space-x-1 bg-blue-900/20 rounded-xl\">\r\n        {days.map((day) => (\r\n          <Tab\r\n            key={day.full}\r\n            className={({ selected }) =>\r\n              `w-full py-2 rounded-lg focus:ring-2 focus:ring-blue-500  ${\r\n                selected\r\n                  ? 'bg-blue-400 shadow text-white'\r\n                  : 'text-blue-600 hover:bg-white/[0.12] '\r\n              }`\r\n            }\r\n          >\r\n            <span className=\"hidden sm:block\">{day.full}</span>\r\n            <span className=\"sm:hidden\">{day.short}</span>\r\n          </Tab>\r\n        ))}\r\n      </Tab.List>\r\n      <Tab.Panels>\r\n        {dailyForecasts.map((weatherData, i) => (\r\n          <Tab.Panel key={weatherData.EpochDate}>\r\n            {isDetailedView ? (\r\n              <SingleDayDetailedView weatherData={weatherData} day={days[i]} />\r\n            ) : (\r\n              <SingleDayView weatherData={weatherData} day={days[i]} />\r\n            )}\r\n          </Tab.Panel>\r\n        ))}\r\n      </Tab.Panels>\r\n    </Tab.Group>\r\n  );\r\n};\r\n\r\nexport default FiveDaysTabs;\r\n","import { Tab } from '@headlessui/react';\r\nimport FavoriteButton from 'components/FavoriteButton/FavoriteButton';\r\nimport Divider from 'components/UI/Divider';\r\nimport useWindowDimensions from 'hooks/useWindowDimensions';\r\nimport TLV from 'mock/tlv_forecast.json';\r\nimport React from 'react';\r\nimport parseDateToDay from 'utils/parseDateToDay';\r\nimport FiveDaysTabs from './FiveDaysTabs';\r\nimport SingleDayView from './SingleDayView';\r\n\r\nconst FiveDayForecast = ({\r\n  locationKey,\r\n  cityName = 'Tel Aviv',\r\n  countryName = 'Israel',\r\n  isDetailedView = false,\r\n}) => {\r\n  const data = TLV;\r\n  const headline = data.Headline.Text;\r\n  const dailyForecasts = data.DailyForecasts;\r\n  const days = dailyForecasts.map((forcast) =>\r\n    parseDateToDay(new Date(forcast.Date))\r\n  );\r\n\r\n  const { width: windowWidth } = useWindowDimensions();\r\n\r\n  return (\r\n    <div className=\"w-full text-2xl h-full flex flex-col \">\r\n      <div className=\"flex justify-between\">\r\n        <div>\r\n          <h1>\r\n            {cityName}, {countryName}\r\n          </h1>\r\n          <h1 className=\"italic font-thin\">{headline}</h1>\r\n          <h1>Five Days Forecast:</h1>\r\n        </div>\r\n        <div className=\"mb-auto flex\">\r\n          <FavoriteButton />\r\n        </div>\r\n      </div>\r\n\r\n      <Divider className=\"w-full\" />\r\n      <div className=\"h-full flex  justify-center\">\r\n        {windowWidth < 1024 ? (\r\n          <div className=\"w-full h-full\">\r\n            <FiveDaysTabs days={days} dailyForecasts={dailyForecasts} />\r\n          </div>\r\n        ) : (\r\n          <div className=\" items-stretch flex space-x-5\">\r\n            {dailyForecasts.map((weatherData, i) => (\r\n              <SingleDayView\r\n                key={weatherData.EpochDate}\r\n                weatherData={weatherData}\r\n                day={days[i]}\r\n              />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FiveDayForecast;\r\n","import React from 'react';\r\nimport { FaSpinner } from 'react-icons/fa';\r\n\r\nconst Spinner = ({ size = '1.5rem', ...rest }) => {\r\n  return (\r\n    <FaSpinner\r\n      className=\"animate-spin\"\r\n\r\n      size={size}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import Spinner from 'components/UI/Spinner';\r\nimport { useFetchSearchByCity } from 'hooks/reactQuery';\r\nimport { useState } from 'react';\r\n\r\nconst SearchInput = () => {\r\n  const [value, setValue] = useState('');\r\n  return (\r\n    <div className=\"flex border-2 border-black rounded-md w-full max-w-xl mx-auto\">\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={(e) => setValue(e.target.value)}\r\n        placeholder=\"Enter City Name...\"\r\n        className=\"w-full border-r text-xl pl-2 outline-none\"\r\n      />\r\n      {true && (\r\n        <span className=\"p-2 border-l border-black\">\r\n          <Spinner style={{ visibility: 'visible' }} />\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import FiveDayForecast from 'components/FiveDayForecast.js/FiveDayForecast';\r\nimport SearchInput from 'components/SearchInput/SearchInput';\r\nimport Divider from 'components/UI/Divider';\r\nimport { useFetchLocationPhoto } from 'hooks/reactQuery';\r\nimport React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectDefaultLocation } from 'store/defaultLocationSlice';\r\n\r\nconst Home = () => {\r\n  const { cityName, countryName } = useSelector(selectDefaultLocation);\r\n\r\n  const { data, error, isSuccess, isLoading } = useFetchLocationPhoto(\r\n    cityName,\r\n    countryName\r\n  );\r\n  if (isSuccess) console.log(data);\r\n  return (\r\n    <div className=\"flex flex-col justify-start items-center h-full\">\r\n      <span className=\"flex w-full mt-14\">\r\n        <SearchInput />\r\n      </span>\r\n      <Divider className=\"w-full\" />\r\n      <FiveDayForecast />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const slice = createSlice({\r\n  name: 'favorites',\r\n  initialState: {\r\n    favorites: [\r\n      { key: 246100, cityName: 'Tepic', countryName: 'Mexico' },\r\n      { key: 215854, cityName: 'Tel Aviv', countryName: 'Israel' },\r\n    ],\r\n  },\r\n  reducers: {\r\n    addFavorite: (state, newFavorite) => {\r\n      state.favorites.push(newFavorite);\r\n    },\r\n    removeFavorite: (state, favorite) => {\r\n      state.favorites = state.favorites.filter(\r\n        (_favorite) => _favorite !== favorite\r\n      );\r\n    },\r\n    replaceFavorites: (state, newFavoritesArray) => {\r\n      state.favorites = newFavoritesArray;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addFavorite, removeFavorite, replaceFavorites } = slice.actions;\r\n\r\nexport const selectFavorites = (state) => state.favorites.favorites;\r\nexport default slice.reducer;\r\n","import React from 'react';\r\nimport { getWeatherIconURL } from 'constants/URLs';\r\n\r\nconst FavoriteLocationCardInner = ({ locationData, cityName, countryName }) => {\r\n  const { WeatherIcon, Temperature, WeatherText, RealFeelTemperature } =\r\n    locationData;\r\n  return (\r\n    <>\r\n      <img\r\n        className=\"mx-auto\"\r\n        width=\"125px\"\r\n        src={getWeatherIconURL(WeatherIcon)}\r\n        alt=\"\"\r\n      />\r\n      <h1 className=\"text-5xl\">{Temperature.Metric.Value + 'C'}</h1>\r\n      <h3>{WeatherText}</h3>\r\n      <h3>Feels Like: {RealFeelTemperature.Metric.Value + 'C'}</h3>\r\n      <button className=\"mt-auto border border-white py-2 bg-black bg-opacity-50 hover:bg-opacity-100 rounded-md\">\r\n        5-Day forecast\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FavoriteLocationCardInner;\r\n","import FavoriteButton from 'components/FavoriteButton/FavoriteButton';\r\nimport Spinner from 'components/UI/Spinner';\r\nimport { useGetCurrectCondotions } from 'hooks/reactQuery';\r\nimport FavoriteLocationCardInner from './FavoriteLocationCardInner';\r\n\r\nconst FavoriteLocationCard = ({ cityName, countryName, locationKey }) => {\r\n  const { data: locationData, status } = useGetCurrectCondotions(locationKey);\r\n\r\n  return (\r\n    <div\r\n      //   style={{ backgroundImage: 'url(' + locationImageSrc + ')' }}\r\n      className=\" w-56 h-80 border rounded-md border-black bg-cover relative\"\r\n    >\r\n      <div className=\"absolute top-0 left-0 right-0 bottom-0 bg-black bg-opacity-50 p-4  text-white\">\r\n        <div className=\"flex flex-col justify-between h-full\">\r\n          <h1>\r\n            {cityName}, {countryName}\r\n          </h1>\r\n          {status === 'success' && (\r\n            <>\r\n              <FavoriteButton className=\"absolute right-2 top-2 z-10\" />\r\n              <FavoriteLocationCardInner\r\n                locationData={locationData[0]}\r\n                cityName={cityName}\r\n                countryName={countryName}\r\n              />\r\n            </>\r\n          )}\r\n          {status === 'loading' && (\r\n            <span className=\"m-auto\">\r\n              <Spinner size=\"4rem\" />\r\n              <h1 className=\"mt-4\">Loading...</h1>\r\n            </span>\r\n          )}\r\n          {status === 'error' && <h1>Error</h1>}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FavoriteLocationCard;\r\n","import { useSelector } from 'react-redux';\r\nimport { selectFavorites } from './Favorites.slice';\r\nimport FavoriteLocationCard from '../../components/FavoriteLocationCard/FavoriteLocationCard';\r\nimport { useFetchMultipleCurrentConditions } from 'hooks/reactQuery';\r\nimport Divider from 'components/UI/Divider';\r\nconst Favorites = () => {\r\n  const favoritesKeys = useSelector(selectFavorites);\r\n\r\n  useFetchMultipleCurrentConditions(favoritesKeys.map((fav) => fav.key));\r\n\r\n  if (favoritesKeys.length === 0) return <h1>No favorites</h1>;\r\n  return (\r\n    <div className=\"my-14\">\r\n      <div className=\"font-bold\">My Favorites Locations:</div>\r\n      <Divider />\r\n      <div className=\"flex flex-col flex-wrap sm:flex-row justify-center items-center gap-10 \">\r\n        {favoritesKeys.map((fav, i) => (\r\n          <FavoriteLocationCard\r\n            key={fav.key}\r\n            locationKey={fav.key}\r\n            cityName={fav.cityName}\r\n            countryName={fav.countryName}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Favorites;\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router';\r\n\r\nimport Home from 'features/home/Home';\r\nimport Favorites from 'features/favorites/Favorites';\r\n\r\nconst AppRoutes = () => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\">\r\n        <Home />\r\n      </Route>\r\n      <Route path=\"/favorites\">\r\n        <Favorites />\r\n      </Route>\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default AppRoutes;\r\n","import Navbar from 'features/header/Navbar';\nimport { useFetchByGEOLocation } from 'hooks/reactQuery';\nimport useCurrentLocation from 'hooks/useCurrentLocation';\nimport useSetCurrentLocation from 'hooks/useSetCurrentLocation';\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport AppRoutes from 'routes/AppRoutes';\nimport { setLocation } from 'store/defaultLocationSlice';\n\nfunction App() {\n  //useFetchByGEOLocation();\n  return (\n    <>\n      <Router>\n        <Navbar />\n        <div\n          style={{ height: 'calc(100vh - 64px)' }}\n          className=\"container px-2 sm:px-0 mx-auto\"\n        >\n          <AppRoutes />\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport favoritesSlice from 'features/favorites/Favorites.slice';\nimport defaultLocationSlice from './defaultLocationSlice';\n\nexport const store = configureStore({\n  reducer: {\n    favorites: favoritesSlice,\n    defaultLocation: defaultLocationSlice,\n  },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './store/store';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools';\n\nconst queryClient = new QueryClient();\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <QueryClientProvider client={queryClient}>\n        <App />\n        <ReactQueryDevtools />\n      </QueryClientProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}